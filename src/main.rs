// Import the modules we created for each part of the compiler
mod lexer;
mod parser;
mod vm;
mod token;

// Bring important parts into scope
use crate::lexer::Lexer;
use crate::parser::Parser;
use crate::vm::VM;
use std::env;
use std::fs;

fn main() {
    // Collect command-line arguments (expects: program_name source_file)
    let args: Vec<String> = env::args().collect();

    // If no input file is given, show usage message and stop
    if args.len() < 2 {
        eprintln!("Usage: {} <source.c>", args[0]);
        return;
    }

    // Get the source file path from command-line
    let source_path = &args[1];

    // Try reading the source file into a string
    let source_code = match fs::read_to_string(source_path) {
        Ok(content) => content, // Success
        Err(err) => {
            // If file fails to load, show error and stop
            eprintln!("Failed to read file '{}': {}", source_path, err);
            return;
        }
    };

    // Pass the source code to the lexer
    let lexer = Lexer::new(&source_code);

    // Create the parser using the lexer
    let mut parser = Parser::new(lexer);

    // Parse the source code into intermediate instructions
    parser.parse_program();

    // Print all the instructions that were generated by the parser
    println!("\n Instructions:");
    for inst in &parser.instructions {
        println!("{}", inst);
    }

    // Run the virtual machine with the instructions
    let mut vm = VM::new(parser.instructions);
    vm.run();
}
